mean_std_header <- unique (grep(paste(mean_std,collapse="|"),No_meanFreq_header, value=TRUE))
#mean_std_header is a character vector that contains the names of the columns of interest
#Subsetting the BigTable with the columns of interest stated in 'mean_std_header'
TidyTable1 <- BigTable[,c("subject","Activity", mean_std_header)]
TidyTable1 <- arrange(TidyTable1, subject, decreasing = FALSE)
##END OF STEP 2
##STEP 4: Appropriately labels the data set with descriptive activity names.
##Reanameing columns
#Taking the names of the TidyTable1 into the character vector column_Names
column_Names <- names(TidyTable1)
#Making substitutions in order to give more appropiate names
column_Names <- gsub("tBodyAcc","time_Body_Acceleration",column_Names)
column_Names <- gsub("tGravityAcc","time_Gravity_Acceleration",column_Names)
column_Names <- gsub("tBodyGyro","time_Body_Gyroscope",column_Names)
column_Names <- gsub("fBodyAcc","frequency_Body_Acceleration",column_Names)
column_Names <- gsub("fBodyGyro","frequency_Body_Gyroscope",column_Names)
column_Names <- gsub("fBodyBodyAccJerkMag","frequency_Body_AccelerationJerkMag",column_Names)
column_Names <- gsub("fBodyBodyGyroMag","frequency_Body_GyroscopeMag",column_Names)
column_Names <- gsub("fBodyBodyGyroJerkMag","frequency_Body_GyroscopeJerkMag",column_Names)
#Setting the new names into the TidyTable1
names(TidyTable1) <-column_Names
##STEP 5: Creates a second, independent tidy data set with the average of each variable for
#each activity and each subject.
TidyTable2 <- ddply(TidyTable1, .(subject, Activity), numcolwise(mean))
##other option (just for keeping a record of a differente option (a more expensive one))
#TidyTable2 <- split(TidyTable1[,3:length(TidyTable1)], list(TidyTable1$subject,TidyTable1$Activity))
#TidyTable2 <- sapply(TidyTable2,colMeans)
#TidyTable2 <- t(TidyTable2)
##END OF STEP 5
names(TidyTable1)
write.table(TidyTable1, file = "TidyTable1.txt")
write.table(TidyTable2, file = "TidyTable2.txt")
getwd()
blabla <-read.table("./TidyTable2.txt")
head(blabla)
features <-read.table("./features.txt")
##ACTIVITY
#Loading Activity_labels
Activity_labels <-read.table("./activity_labels.txt")
#Putting names to the columns
names(Activity_labels) <- c("ActivityID","Activity")
##Creating Train_Table
#Loading y_train
y_train <-read.table("./y_train.txt")
#Loading x_train
x_train <-read.table("./x_train.txt")
#Loading subject_train
subject_train <-read.table("./subject_train.txt")
#Adding names to x_train
names(x_train) <- features[,2]
#Creating Train_Table and assigning a name to the first two columns
Train_Table <- cbind(subject_train,y_train,x_train); names(Train_Table)[1:2] <-c("subject","ActivityID")
##END OF STEP 0
#STEP 1: Merges the training and the test sets to create one data set.
##Creating Test_Table
#Loading y_test
y_test <-read.table("./y_test.txt")
#Loading X_test
x_test <-read.table("./X_test.txt")
#Loading subject_test
subject_test <-read.table("./subject_test.txt")
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
set.seed(4)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
class(rpois(5.2))
l <- rpois(5,2)
class(l)
?qpois
?ppois
?rpois
?ppois
str(ppois)
str(qpois)
str(rpois)
str(dpois)
getwd()
library(JGR)
JGR()
q()
install.packages(c("arules", "Formula", "httr", "installr", "jsonlite", "markdown", "mime", "RCurl"))
update.packages(checkBuilt=TRUE)
setwd("C:/Users/VXL/Documents/Cursos Internet/Data Specialization/5_Reproducible Research/Peer1")
raw <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA")
raw <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA")
head(raw)
tail(raw)
class(raw)
summary(raw)
raw2 <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA", na.rm = TRUE)
raw2 <-apply(raw,2,max,na.rm=TRUE)
data <- raw[complete.cases(raw),1]
data
head(data)
data <- raw[complete.cases(raw),]
data
head(data)
summary(raw)
d2 <- tapply(data[,1],data[,2],FUN = sum)
head(d2)
hist(d2, xlab = "Steps", col = "red", main = "Histogram of Steps")
head(data)
d2.mean
d2.mean <- tapply(data[,1],data[,2], FUN = mean)
head(d2.mean)
t(d2.mean)
names(d2.mean)
res1 <- d2.mean(1)
res1 <- d2.mean[1]
res1
res1[,1] = d2.mean[,1]
class(d2.mean)
d2.mean2 <- as.dataframe(d2.mean)
d2.mean2 <- as.data.frame(d2.mean)
head(d2.mean2)
library(plyr)
help(ddply)
head(data)
d2.prueba <- ddply(data,.(date), summarise, mean = mean(steps), median = median(steps))
head(d2.prueba)
head(d2.mean)
d2.prueba
head(d2)
d2 <- as.data.frame(tapply(data[,1],data[,2],FUN = sum))
head(d2)
d2 <- as.data.frame(tapply(data[,1],data[,2],FUN = sum), optional = TRUE)
head(d2)
head(data)
d2.prueba <- ddply(data,.(date), summarise, total = sum(steps))
head(d2.prueba)
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(steps))
head(d2)
d2.1 <- as.data.frame(tapply(data[,1],data[,2],FUN = sum))
head(d2.1)
hist(d2, xlab = "Steps", col = "red", main = "Histogram of Steps")
class(d2[,1])
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(as.numeric(steps)))
hist(d2, xlab = "Steps", col = "red", main = "Histogram of Steps")
class(d2[,1])
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(as.numeric(steps)))
class(d2[,1])
head(d2[,1])
head(d2[,2])
class(d2[,2])
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(steps))
class(d2[,2])
hist(d2[,2], xlab = "Steps", col = "red", main = "Histogram of Steps")
View(`d2.1`)
View(`d2.1`)
raw <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA")
data <- raw[complete.cases(raw),]
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(steps))
head(d2)
res2 <- ddply(d2,.(date), summarise, Mean = mean(TotalSteps), Median = median(TotalSteps))
res2
head(d2)
help("ddply")
res2 <- ddply(d2, Mean = mean(TotalSteps), Median = median(TotalSteps))
summary(d2)
res2<-c(mean(d2[,2]))
res2
res2<-c(Mean = mean(d2[,2]), Median = median(d2[,2]))
res2
head(data)
d3 <- ddply(data,.(interval), summarise, MeanSteps = mean(steps))
head(d3)
distinct(data[,3])
unique(data[,3])
plot(d3)
plot(d3, type = 1)
plot(d3, type = "1")
help("plot")
plot(d3, type = "l")
help("plot")
plot(d3, type = "l", col = "red", main = "Mean of Steps by Inteval")
plot(d3, type = "l", col = "red", main = "Mean of Steps by Intreval")
help("plot")
plot(d3, type = "l", col = "red", main = "Mean of Steps by Intreval")
head(d3)
max(d3[2])
d3[1,max(d3[,2])]
max(d3[,2])
d3(,max(d3[,2]))
d3(max(d3[,2]))
d3[,max(d3[,2])]
d3[order(d3$MeanSteps)]
d3[order(d3$MeanSteps),]
tail(d3[order(d3$MeanSteps),])
tail(d3[order(d3$MeanSteps),], n = 1)
val <- d3[,d3[,2]=max(d3[,2])]
val <- d3[,d3[,2]==max(d3[,2])]
val <- d3[,which(d3$MeanSteps==max(d3$MeanSteps)]
val <- d3[which(d3$MeanSteps==max(d3$MeanSteps)]
val <- subset(d3, max(d3$MeanSteps))
val <- subset(d3, d3$MEanSteps==max(d3$MeanSteps))
val
val <- subset(d3, d3$MeanSteps==max(d3$MeanSteps))
val
head(raw)
complete.cases(raw)
table(complete.cases(raw))
table(complete.cases(raw))["FALSE"]
head(raw)
head(d3)
data.na <- raw[!complete.cases(raw),]
head(data.na)
head(d3)
d3.prueba <- join(data.na, d3, by = interval, type = "left", match = "all")
d3.prueba <- join(data.na, d3, by = "interval", type = "left", match = "all")
head(d3.prueba)
d3.na.means <- join(data.na, d3, by = "interval", type = "left", match = "all")
data.na
head(data.na)
data2.na  = data.na
head(data2.na)
head(d3.na.means)
data2.na$steps = data.na.means$MeanSteps
data2.na$steps = d3.na.means$MeanSteps
head(data2.na)
data.complete <- rbind(data,data2.na)
dim(data.complete)
is.na(data.complete)
table(is.na(data.complete))
table(complete.cases(data.complete))
head(data.complete)
head(data.na)
head(data2.na)
data.complete[order(data.complete$date, data.complete$interval)]
data.complete[order(data.complete$date, data.complete$interval),]
head(data.complete)
data2.complete <- data.complete[order(data.complete$date, data.complete$interval),]
head(data2.complete)
tail(data2.complete)
dim(raw) = dim(data.complete)
dim(raw) == dim(data.complete)
dim(raw) == dim(data)
table(complete.cases(data.complete))
hist(data.complete$steps)
hist(data$steps)
hist(data.complete$steps)
d4 <- ddply(data.complete,.(date), summarise, TotalSteps = sum(steps))
hist(d4)
head(d4)
head(d4$TotalSteps)
head(data)
data.p <- data
data2.complete <- data.complete
data.p[,4] <- 'with-NA'
head(data.p)
data2.complete[,4] <- 'filling-NA'
head(data2.complete)
data.t <- rbind(data.p,data2.complete)
ggplot(data.t, aes(steps, fill = V4)) + geom_density(alpha = 0.2)
library(ggplot2)
ggplot(data.t, aes(steps, fill = V4)) + geom_density(alpha = 0.2)
data.p <- d2
data2.complete <- d4
data.p[,4] <- 'with-NA'
head(data.p)
data.p[,3] <- 'with-NA'
data2.complete[,3] <- 'filling-NA'
data.p[,3] <- 'without-NA'
data.t <- rbind(data.p,data2.complete)
ggplot(data.t, aes(steps, fill = V4)) + geom_density(alpha = 0.2)
head(data.t)
ggplot(data.t, aes(steps, fill = V3)) + geom_density(alpha = 0.2)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_density(alpha = 0.2)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_hist(alpha = 0.2)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_histogram(alpha = 0.2)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_histogram(alpha = 0.2, binwidth = x)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_density(alpha = 0.2, binwidth = x)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_density(alpha = 0.2)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_density(alpha = 0.2) + labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
names(d3)[3]<-"NA-Flag"
head(d3)
names(data.p)[3]<-"NA-Flag"
head(data.p)
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps \n(filling NA values)"
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps \n(filling NA values)"
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps \n(filling NA values))"
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps (filling NA values))"
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps \n(filling NA values)")
d3
head(d3)
d3 <- ddply(data,.(interval), summarise, MeanSteps = mean(steps))
d3[,3] <- 'without-NA'
head(d3)
---
title: "Peer Assessment 1"
#author: "FChn"
date: "Thursday, August 14, 2014"
output: html_document
---
```{r, echo=FALSE}
setwd("C:/Users/VXL/Documents/Cursos Internet/Data Specialization/5_Reproducible Research/Peer1")
library(plyr)
library(ggplot2)
```
## 1. Loading and processing the data
The data must be in the working directory and are gonna be loaded in to the "raw" table.
The NA values are gonna be removed using the complete.cases function and the new table will be named "data"
```{r}
raw <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA")
data <- raw[complete.cases(raw),]
```
## 2. What is mean total number of steps taken per day?
First we are gonna calculate the sum of all the steps per day using the ddply function.
```{r}
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(steps))
```
Then we make an histogram of the sum of all steps per day
```{r, fig.height=5, fig.width=5}
hist(d2[,2], xlab = "Steps", col = "red", main = "Histogram of Steps")
```
Now we are gonna calculate the mean a median of the total steps made per day.
```{r}
c(Mean = mean(d2[,2]), Median = median(d2[,2]))
```
## 3. What is the average daily activity pattern?
First we are gonna calculate the mean of steps but aggregating by the inteveral
```{r}
d3 <- ddply(data,.(interval), summarise, MeanSteps = mean(steps))
```
Then we plot the time series
```{r, fig.height=5, fig.width=5}
plot(d3, type = "l", col = "red", main = "Mean of Steps by Intreval")
```
Now we found which intrval contains the maxium number of steps
```{r}
subset(d3, d3$MeanSteps==max(d3$MeanSteps))
```
## 4. Imputing missing values
First we are gonna calculate the number of rows with missing values in the original data
```{r}
table(complete.cases(raw))["FALSE"]
```
Now we are gonna fill those missing values in the "steps" column with the mean value in the particular interval. We have calculate the mean for each interval and is already stored in the "d3" dataframe.
The first step is to subset the rows of the original data that has NA values.
```{r}
data.na <- raw[!complete.cases(raw),]
```
The second step is to make a join (plyr) of the data.na table with the one with the means by interval
```{r}
d3.na.means <- join(data.na, d3, by = "interval", type = "left", match = "all")
```
The third step is to update the "steps"" column in the dataframe with NA values (data.na) with the values merged in the d3.na.means dataframe.
```{r}
data.na$steps = d3.na.means$MeanSteps
```
The final step is to make a row bind of the new data.na dataframe with the one with no NA values (data) into a new one and make sort by data and interval
```{r}
data.complete <- rbind(data,data.na)
data.complete <- data.complete[order(data.complete$date, data.complete$interval),]
```
Note that now the dimension of the raw table is the same that this data.complete dataframe and that the last one has no NA values
```{r}
dim(raw) == dim(data.complete)
table(complete.cases(data.complete))
```
Lets compare the results of the first part (histogram of total steps by day, and their mean a median)
```{r, fig.height=5, fig.width=5}
d4 <- ddply(data.complete,.(date), summarise, TotalSteps = sum(steps))
hist(d4[,2], xlab = "Steps", col = "red", main = "Histogram of Steps \n(filling NA values)")
```
Because of the scale is not easy to compare the two histograms. Lets put them together. For this lets add a flag in d3 and d4 dataframes
```{r}
d3[,3] <- 'without-NA'
names(d3)[3]<-"NA-Flag"
d4[,3] <- 'filling-NA'
names(d4)[3]<-"NA-Flag"
d5 <- rbind(d3,d4)
ggplot(data.t, aes(TotalSteps, fill = V3)) + geom_density(alpha = 0.2) + labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
raw <- read.csv("activity.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, na.strings = "NA")
data <- raw[complete.cases(raw),]
d2 <- ddply(data,.(date), summarise, TotalSteps = sum(steps))
hist(d2[,2], xlab = "Steps", col = "red", main = "Histogram of Steps")
c(Mean = mean(d2[,2]), Median = median(d2[,2]))
d3 <- ddply(data,.(interval), summarise, MeanSteps = mean(steps))
plot(d3, type = "l", col = "red", main = "Mean of Steps by Intreval")
head(d3)
head(d4)
head(d2)
d2[,3] <- 'without-NA'
names(d2)[3]<-"NA-Flag"
d4[,3] <- 'filling-NA'
names(d4)[3]<-"NA-Flag"
d5 <- rbind(d2,d4)
ggplot(d5, aes(TotalSteps, fill = 'NA-Flag')) + geom_density(alpha = 0.2) + labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
head(d4)
head(d2)
unique(d5$NA-Flag)
head(d5)
head(d5[,3])
unique(d5[,3])
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T)
help(weekdays)
head(data)
head(d4)
d5 <- cbind(d4,weekdays(d4$date))
class(d4$date)
d5 <- cbind(d4,weekdays(as.date(d4$date)))
d5 <- cbind(d4,weekdays(as.Date(d4$date)))
head(d5)
d5 <- cbind(d4,Weekday = weekdays(as.Date(d4$date)))
head(d5)
d5 <- cbind(d4,Weekday = weekdays(as.Date(d4$date), abbreviate))
d5 <- cbind(d4,Weekday = weekdays(as.Date(d4$date), abbreviate = FALSE))
head(d5)
head(d5$Weekday)
d5$Weekday %in% c("Saturday","Sunday")
dim(d5)
head(data.complete)
d5 <- cbind(data.complete,Weekday = weekdays(as.Date(d4$date)))
head(d5)
d5 <- cbind(data.complete,Weekday = weekdays(as.Date(data.complete$date)))
head(d5)
if(d5$Weekday %in% c("Saturday","Sunday")){
d5[,5]<-1
}else {0}
if(d5$Weekday %in% c("Saturday","Sunday")){
d5[5]<-1
}else {0}
if(d5$Weekday %in% c("Saturday","Sunday")){
d5[5]<-1
}else {d5[5]=0}
if(d5$Weekday %in% c("Saturday","Sunday")){
d5[,5]<-1
}else {d5[,5]=0}
d5[,5] = 0
head(d5)
if(d5$Weekday %in% c("Saturday","Sunday")){
d5[,5]<-1
}else {d5[,5]=0}
head(d5$Weekday %in% c("Saturday", "Sunday"))
d5[,5]<-d5$Weekday %in% c("Saturday", "Sunday")
d5[,5]<-Flag = d5$Weekday %in% c("Saturday", "Sunday")
d5[,5]<- Flag=d5$Weekday %in% c("Saturday", "Sunday")
d5[,5]<-d5$Weekday %in% c("Saturday", "Sunday")
head(d5)
d5 <- cbind(data.complete,Weekday = weekdays(as.Date(data.complete$date)) %in% c("Saturday", "Sunday"))
head(d5)
d5 <- cbind(data.complete,Weekend = weekdays(as.Date(data.complete$date)) %in% c("Saturday", "Sunday"))
head(d5)
d5 <- cbind(data.complete,Weekend = as.factor(weekdays(as.Date(data.complete$date)) %in% c("Saturday", "Sunday")))
head(d5)
d5 <- rbind(d2,d4)
ggplot(d5, aes(TotalSteps, fill = Flag)) + geom_density(alpha = 0.2) +
labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
d2[,3] <- 'without-NA'
names(d2)[3]<-"Flag"
d4[,3] <- 'filling-NA'
names(d4)[3]<-"Flag"
d5 <- rbind(d2,d4)
ggplot(d5, aes(TotalSteps, fill = Flag)) + geom_density(alpha = 0.2) +
labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
d6 <- cbind(data.complete,Weekend = as.factor(weekdays(as.Date(data.complete$date)) %in% c("Saturday", "Sunday")))
head(d6)
ggplot(d6, aes(steps, fill = Weekend)) + geom_line(alpha = 0.2) +
labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
ggplot(d6, aes(steps, fill = Weekend)) + geom_line() +
labs(title = "Comparision of total steps without NA values \n and filling NA values with the mean")
head(d6)
ggplot(d6, aes(steps, fill = Weekend)) + geom_line()
ggplot(d6, aes(steps)) + geom_line()
class(d6$steps)
plot(d6, type = "l", col = "red", main = "Mean of Steps by Intreval")
plot(d6$steps, type = "l", col = "red", main = "Mean of Steps by Intreval")
ggplot(d6$steps, aes(Weekend)) + geom_line()
ggplot(d6, aes(x=interval, y = steps, group = Weekend)) + geom_line()
d7 <- ddply(data,.(interval,Weekend), summarise, MeanSteps = mean(steps))
d7 <- ddply(d6,.(interval,Weekend), summarise, MeanSteps = mean(steps))
head(d7)
ggplot(d7, aes(x=interval, y = steps, group = Weekend)) + geom_line()
ggplot(d7, aes(x=interval, y = MeanSteps, group = Weekend)) + geom_line()
ggplot(d7, aes(x=interval, y = MeanSteps)) + geom_line() + facet_wrap(~Weekend)
ggplot(d7, aes(x=interval, y = MeanSteps)) + geom_line() + facet_wrap(,~Weekend)
ggplot(d7, aes(x=interval, y = MeanSteps)) + geom_line() + facet_grip(~Weekend)
ggplot(d7, aes(x=interval, y = MeanSteps)) + geom_line() + facet_grid(~Weekend)
ggplot(d7, aes(x=interval, y = MeanSteps)) + geom_line() + facet_wrap(~Weekend)
ggplot(d7, aes(x=interval, y = MeanSteps)) +
geom_line() +
facet_wrap(~Weekend) +
labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
ggplot(d7, aes(x=interval, y = MeanSteps, colour = blue)) +
geom_line() +
facet_wrap(~Weekend) +
labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
ggplot(d7, aes(x=interval, y = MeanSteps, colour = variable)) +
geom_line() +
facet_wrap(~Weekend) +
labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
ggplot(d7, aes(x=interval, y = MeanSteps, colour = Weekend)) +
geom_line() +
facet_wrap(~Weekend) +
labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
head(d7)
ggplot(d7, aes(x=interval, y = MeanSteps, colour = Weekend)) +
+     geom_line() +
+     facet_wrap(~Weekend) +
+     labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
ggplot(d7, aes(x=interval, y = MeanSteps, colour = Weekend)) +
+     geom_line() +
+     facet_wrap(~Weekend) +
+     labs(title = "Comparision of total steps between \n weekdays(FALSE) or weekends(TRUE)")
